/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { TypeExpression: peg$parseTypeExpression },
      peg$startRuleFunction  = peg$parseTypeExpression,

      peg$c0 = function(r, unk) {
              let result = unk;

              if (r) {
                  result = repeatable(result);
              }

              return result;
          },
      peg$c1 = "?",
      peg$c2 = peg$literalExpectation("?", false),
      peg$c3 = "!",
      peg$c4 = peg$literalExpectation("!", false),
      peg$c5 = function(r, prefix, expr) {
              let result = expr;

              if (r) {
                  result = repeatable(result);
              }

              return nullable(result, prefix);
          },
      peg$c6 = function(expr, optionalPre, postfix, optionalPost) {
              let result = expr;

              // we only allow one optional operator
              if (optionalPre && optionalPost) {
                  return null;
              }

              // "non-nullable, yet optional" makes no sense, but we allow it
              result = nullable(result, postfix);

              if (optionalPre || optionalPost) {
                  result = optional(result);
              }

              return result;
          },
      peg$c7 = function(expr, postfix) {
              return nullable(expr, postfix);
          },
      peg$c8 = function(prefix, expr) {
              prefix = prefix || '';

              return nullable(expr, prefix);
          },
      peg$c9 = function(expr, postfix) {
              postfix = postfix || '';

              return nullable(expr, postfix);
          },
      peg$c10 = function(expr) {
              return repeatable(expr);
          },
      peg$c11 = function(lit, opt) {
              let result = lit;

              if (opt) {
                  result = optional(result);
              }

              return result;
          },
      peg$c12 = function(lit) {
              return repeatable(lit);
          },
      peg$c13 = "*",
      peg$c14 = peg$literalExpectation("*", false),
      peg$c15 = function() {
              return {
                  type: Types.AllLiteral
              };
          },
      peg$c16 = function() {
              return {
                  type: Types.NullLiteral
              };
          },
      peg$c17 = function() {
              return {
                  type: Types.UndefinedLiteral
              };
          },
      peg$c18 = "...",
      peg$c19 = peg$literalExpectation("...", false),
      peg$c20 = function() {
              return {
                  repeatable: true
              };
          },
      peg$c21 = "=",
      peg$c22 = peg$literalExpectation("=", false),
      peg$c23 = function() {
              return {
                  optional: true
              };
          },
      peg$c24 = "[]",
      peg$c25 = peg$literalExpectation("[]", false),
      peg$c26 = function(name, brackets) {
              let result;

              function nest(obj) {
                  return {
                      type: Types.TypeApplication,
                      expression: {
                          type: Types.NameExpression,
                          name: 'Array'
                      },
                      applications: [obj]
                  };
              }

              // we only allow this if JSDoc parsing is enabled
              if (!options.jsdoc) {
                  return null;
              }

              result = nest(name);
              result.applications[0].type = Types.NameExpression;

              for (let i = 0, l = brackets.length - 1; i < l; i++) {
                  result = nest(result);
              }

              return result;
          },
      peg$c27 = function(exp, appl, opt) {
              let result = {};

              const nameExp = {
                  type: Types.NameExpression,
                  name: exp.name
              };

              if (appl && appl.length) {
                  result.type = Types.TypeApplication;
                  result.expression = nameExp;
                  result.applications = appl;
              } else {
                  result = nameExp;
              }

              if (opt) {
                  result = optional(result);
              }

              return result;
          },
      peg$c28 = function(t) {
              return repeatable(t);
          },
      peg$c29 = function(exp, opt) {
              let result = {
                  type: Types.NameExpression,
                  name: exp.name,
                  reservedWord: true
              };

              if (opt) {
                  result = optional(result);
              }

              return result;
          },
      peg$c30 = ".",
      peg$c31 = peg$literalExpectation(".", false),
      peg$c32 = "<",
      peg$c33 = peg$literalExpectation("<", false),
      peg$c34 = ">",
      peg$c35 = peg$literalExpectation(">", false),
      peg$c36 = function(sep, l) {
              return l;
          },
      peg$c37 = ",",
      peg$c38 = peg$literalExpectation(",", false),
      peg$c39 = function(expr, list) {
              let result = [expr];

              for (let i = 0, l = list.length; i < l; i++) {
                  result.push(list[i][3]);
              }
              return result;
          },
      peg$c40 = function() {
              let result;

              // we only allow this if JSDoc parsing is enabled
              if (!options.jsdoc) {
                  return null;
              }

              result = {
                  type: Types.TypeApplication,
                  expression: {
                      type: Types.NameExpression,
                      name: 'Array'
                  },
                  applications: [
                      {
                          type: Types.FunctionType,
                          params: []
                      }
                  ]
              };

              return result;
          },
      peg$c41 = function(sig, opt) {
              // signature is required unless JSDoc parsing is enabled
              if (!sig && !options.jsdoc) {
                  return null;
              } else if (sig === null) {
                  sig = {
                      params: []
                  };
              }

              let result = {
                  type: Types.FunctionType
              };

              Object.keys(sig).forEach(function(key) {
                  result[key] = sig[key];
              });

              if (opt) {
                  result = optional(result);
              }

              return result;
          },
      peg$c42 = "(",
      peg$c43 = peg$literalExpectation("(", false),
      peg$c44 = ")",
      peg$c45 = peg$literalExpectation(")", false),
      peg$c46 = ":",
      peg$c47 = peg$literalExpectation(":", false),
      peg$c48 = function(sig, returns) {
              const result = {};

              result.params = sig ? sig.params : [];
              if (sig && sig['new']) {
                  result['new'] = sig['new'];
              }
              if (sig && sig['this']) {
                  result['this'] = sig['this']
              }

              if (returns && returns[3]) {
                  result.result = returns[3];
              }

              return result;
          },
      peg$c49 = function(funcNew, funcThis, params) {
              const result = {
                  params: params ? params[3] : [],
                  'new': funcNew
              };
              if (funcThis) {
                  result['this'] = funcThis[3];
              }

              return result;
          },
      peg$c50 = function(funcThis, funcNew, params) {
              const result = {
                  params: params ? params[3] : [],
                  'this': funcThis
              };

              if (funcNew) {
                  result['new'] = funcNew[3];
              }

              return result;
          },
      peg$c51 = function(params) {
              return { params };
          },
      peg$c52 = "new",
      peg$c53 = peg$literalExpectation("new", false),
      peg$c54 = function(expr) { return expr; },
      peg$c55 = "this",
      peg$c56 = peg$literalExpectation("this", false),
      peg$c57 = function(rp) {
              return [rp];
          },
      peg$c58 = function(nrp, rp) {
              let result = [];

              if (nrp !== '') {
                  result = nrp;
              }
              if (rp && rp[3]) {
                  result.push(rp[3]);
              }
              return result;
          },
      peg$c59 = function(p, list) {
              const result = [p];

              for (let i = 0, l = list.length; i < l; i++) {
                  result.push(list[i][3]);
              }

              return result;
          },
      peg$c60 = function(op, list) {
              const result = [op];

              for (let i = 0, l = list.length; i < l; i++) {
                  result.push(list[i][3]);
              }

              return result;
          },
      peg$c61 = function(paramType) { return paramType; },
      peg$c62 = function(t) {
              t = optional(t);
              return t;
          },
      peg$c63 = "[",
      peg$c64 = peg$literalExpectation("[", false),
      peg$c65 = "]",
      peg$c66 = peg$literalExpectation("]", false),
      peg$c67 = function(t) {
              return repeatable(t || '');
          },
      peg$c68 = function() {
              return repeatable({});
          },
      peg$c69 = function(t, opt) {
              let result = {
                  type: Types.TypeUnion,
                  elements: t
              };

              if (opt) {
                  result = optional(result);
              }

              return result;
          },
      peg$c70 = function(tu) {
              return repeatable(tu);
          },
      peg$c71 = function(expr, list) {
              const result = [expr];

              for (let i = 0, l = list.length; i < l; i++) {
                  result.push(list[i][1]);
              }

              return result;
          },
      peg$c72 = function(list) {
              return {
                  type: Types.TypeUnion,
                  elements: list
              };
          },
      peg$c73 = "|",
      peg$c74 = peg$literalExpectation("|", false),
      peg$c75 = function() {
              return '';
          },
      peg$c76 = "{",
      peg$c77 = peg$literalExpectation("{", false),
      peg$c78 = "}",
      peg$c79 = peg$literalExpectation("}", false),
      peg$c80 = function(list, opt) {
              let result = {
                  type: Types.RecordType,
                  fields: list || []
              };

              if (opt) {
                  result = optional(result);
              }

              return result;
          },
      peg$c81 = function(type, list) {
              const result = [type];

              list = list || [];

              for (let i = 0, l = list.length; i < l; i++) {
                  result.push(list[i][3]);
              }

              return result;
          },
      peg$c82 = function(key, expr) {
              const result = {
                  type: Types.FieldType,
                  key: key,
                  value: undefined
              };

              if (expr && expr[3]) {
                  result.value = expr[3];
              }

              return result;
          },
      peg$c83 = function(t) {
              if (!options.jsdoc) {
                  return null;
              }

              return t;
          },
      peg$c84 = function(lit) {
              if (!options.jsdoc) {
                  return null;
              }

              return {
                  name: `"${lit.join('')}"`
              };
          },
      peg$c85 = function(lit) {
              if (!options.jsdoc) {
                  return null;
              }

              return {
                  name: `'${lit.join('')}'`
              };
          },
      peg$c86 = function(id, props) {
              props = props || '';

              return {
                  name: id + props
              };
          },
      peg$c87 = function(rw) {
              return {
                  name: rw
              };
          },
      peg$c88 = function(lit) {
              return `"${lit}"`;
          },
      peg$c89 = function(lit) {
              return `'${lit}'`;
          },
      peg$c90 = "#",
      peg$c91 = peg$literalExpectation("#", false),
      peg$c92 = "~",
      peg$c93 = peg$literalExpectation("~", false),
      peg$c94 = "/",
      peg$c95 = peg$literalExpectation("/", false),
      peg$c96 = function(sep, prop) {
              // we only allow '.' unless JSDoc parsing is enabled
              if (sep !== '.' && !options.jsdoc) {
                  return null;
              }

              return sep + prop;
          },
      peg$c97 = function(name) { return name; },
      peg$c98 = "$",
      peg$c99 = peg$literalExpectation("$", false),
      peg$c100 = "_",
      peg$c101 = peg$literalExpectation("_", false),
      peg$c102 = "@",
      peg$c103 = peg$literalExpectation("@", false),
      peg$c104 = "-",
      peg$c105 = peg$literalExpectation("-", false),
      peg$c106 = "\u200C",
      peg$c107 = peg$literalExpectation("\u200C", false),
      peg$c108 = "\u200D",
      peg$c109 = peg$literalExpectation("\u200D", false),
      peg$c110 = function(parts) {
              if (!options.jsdoc) {
                  return null;
              }

              parts = parts || [];

              return `(${parts.join(', ')})`;

          },
      peg$c111 = function(params) {
              if (!options.jsdoc) {
                  return null;
              }

              params = params || [];

              return `(${params.join(', ')})`;
          },
      peg$c112 = "break",
      peg$c113 = peg$literalExpectation("break", false),
      peg$c114 = "case",
      peg$c115 = peg$literalExpectation("case", false),
      peg$c116 = "catch",
      peg$c117 = peg$literalExpectation("catch", false),
      peg$c118 = "continue",
      peg$c119 = peg$literalExpectation("continue", false),
      peg$c120 = "debugger",
      peg$c121 = peg$literalExpectation("debugger", false),
      peg$c122 = "default",
      peg$c123 = peg$literalExpectation("default", false),
      peg$c124 = "delete",
      peg$c125 = peg$literalExpectation("delete", false),
      peg$c126 = "do",
      peg$c127 = peg$literalExpectation("do", false),
      peg$c128 = "else",
      peg$c129 = peg$literalExpectation("else", false),
      peg$c130 = "finally",
      peg$c131 = peg$literalExpectation("finally", false),
      peg$c132 = "for",
      peg$c133 = peg$literalExpectation("for", false),
      peg$c134 = "if",
      peg$c135 = peg$literalExpectation("if", false),
      peg$c136 = "in",
      peg$c137 = peg$literalExpectation("in", false),
      peg$c138 = "instanceof",
      peg$c139 = peg$literalExpectation("instanceof", false),
      peg$c140 = "return",
      peg$c141 = peg$literalExpectation("return", false),
      peg$c142 = "switch",
      peg$c143 = peg$literalExpectation("switch", false),
      peg$c144 = "throw",
      peg$c145 = peg$literalExpectation("throw", false),
      peg$c146 = "try",
      peg$c147 = peg$literalExpectation("try", false),
      peg$c148 = "typeof",
      peg$c149 = peg$literalExpectation("typeof", false),
      peg$c150 = "var",
      peg$c151 = peg$literalExpectation("var", false),
      peg$c152 = "void",
      peg$c153 = peg$literalExpectation("void", false),
      peg$c154 = "while",
      peg$c155 = peg$literalExpectation("while", false),
      peg$c156 = "with",
      peg$c157 = peg$literalExpectation("with", false),
      peg$c158 = function(kw) {
              return kw;
          },
      peg$c159 = "class",
      peg$c160 = peg$literalExpectation("class", false),
      peg$c161 = "const",
      peg$c162 = peg$literalExpectation("const", false),
      peg$c163 = "enum",
      peg$c164 = peg$literalExpectation("enum", false),
      peg$c165 = "export",
      peg$c166 = peg$literalExpectation("export", false),
      peg$c167 = "extends",
      peg$c168 = peg$literalExpectation("extends", false),
      peg$c169 = "import",
      peg$c170 = peg$literalExpectation("import", false),
      peg$c171 = "super",
      peg$c172 = peg$literalExpectation("super", false),
      peg$c173 = "implements",
      peg$c174 = peg$literalExpectation("implements", false),
      peg$c175 = "interface",
      peg$c176 = peg$literalExpectation("interface", false),
      peg$c177 = "let",
      peg$c178 = peg$literalExpectation("let", false),
      peg$c179 = "package",
      peg$c180 = peg$literalExpectation("package", false),
      peg$c181 = "private",
      peg$c182 = peg$literalExpectation("private", false),
      peg$c183 = "protected",
      peg$c184 = peg$literalExpectation("protected", false),
      peg$c185 = "public",
      peg$c186 = peg$literalExpectation("public", false),
      peg$c187 = "static",
      peg$c188 = peg$literalExpectation("static", false),
      peg$c189 = "yield",
      peg$c190 = peg$literalExpectation("yield", false),
      peg$c191 = function(frw) {
              return frw;
          },
      peg$c192 = "\"",
      peg$c193 = peg$literalExpectation("\"", false),
      peg$c194 = function(str) {
              return str;
          },
      peg$c195 = "'",
      peg$c196 = peg$literalExpectation("'", false),
      peg$c197 = function(lit, digits, exp) {
              return parseFloat(lit + '.' + (digits || '') + (exp || ''));
          },
      peg$c198 = function(digits, exp) {
              return parseFloat('.' + digits + (exp || ''));
          },
      peg$c199 = function(lit, exp) {
              return parseFloat(lit + (exp || ''));
          },
      peg$c200 = "0",
      peg$c201 = peg$literalExpectation("0", false),
      peg$c202 = /^[eE]/,
      peg$c203 = peg$classExpectation(["e", "E"], false, false),
      peg$c204 = /^[+\-]/,
      peg$c205 = peg$classExpectation(["+", "-"], false, false),
      peg$c206 = /^[xX]/,
      peg$c207 = peg$classExpectation(["x", "X"], false, false),
      peg$c208 = function(hex) {
              return parseInt('0x' + hex, 16);
          },
      peg$c209 = "null",
      peg$c210 = peg$literalExpectation("null", false),
      peg$c211 = "undefined",
      peg$c212 = peg$literalExpectation("undefined", false),
      peg$c213 = function() {
              return {
                  type: Types.UnknownLiteral
              };
          },
      peg$c214 = "true",
      peg$c215 = peg$literalExpectation("true", false),
      peg$c216 = "false",
      peg$c217 = peg$literalExpectation("false", false),
      peg$c218 = "Function",
      peg$c219 = peg$literalExpectation("Function", false),
      peg$c220 = "function",
      peg$c221 = peg$literalExpectation("function", false),
      peg$c222 = "\\",
      peg$c223 = peg$literalExpectation("\\", false),
      peg$c224 = "u",
      peg$c225 = peg$literalExpectation("u", false),
      peg$c226 = function(hex) {
              return String.fromCharCode(parseInt('0x' + hex), 16);
          },
      peg$c227 = /^[0-9]/,
      peg$c228 = peg$classExpectation([["0", "9"]], false, false),
      peg$c229 = /^[1-9]/,
      peg$c230 = peg$classExpectation([["1", "9"]], false, false),
      peg$c231 = /^[0-9a-fA-F]/,
      peg$c232 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
      peg$c233 = peg$otherExpectation("Unicode combining mark"),
      peg$c234 = /^[\u0903\u093E\u093F\u0940\u0949\u094A\u094B\u094C\u0982\u0983\u09BE\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E\u0A3F\u0A40\u0A83\u0ABE\u0ABF\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6\u0BC7\u0BC8\u0BCA\u0BCB\u0BCC\u0BD7\u0C01\u0C02\u0C03\u0C41\u0C42\u0C43\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC2\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E\u0D3F\u0D40\u0D46\u0D47\u0D48\u0D4A\u0D4B\u0D4C\u0D57\u0D82\u0D83\u0DCF\u0DD0\u0DD1\u0DD8\u0DD9\u0DDA\u0DDB\u0DDC\u0DDD\u0DDE\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062\u1063\u1064\u1067\u1068\u1069\u106A\u106B\u106C\u106D\u1083\u1084\u1087\u1088\u1089\u108A\u108B\u108C\u108F\u17B6\u17BE\u17BF\u17C0\u17C1\u17C2\u17C3\u17C4\u17C5\u17C7\u17C8\u1923\u1924\u1925\u1926\u1929\u192A\u192B\u1930\u1931\u1933\u1934\u1935\u1936\u1937\u1938\u19B0\u19B1\u19B2\u19B3\u19B4\u19B5\u19B6\u19B7\u19B8\u19B9\u19BA\u19BB\u19BC\u19BD\u19BE\u19BF\u19C0\u19C8\u19C9\u1A19\u1A1A\u1A1B\u1B04\u1B35\u1B3B\u1B3D\u1B3E\u1B3F\u1B40\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1C24\u1C25\u1C26\u1C27\u1C28\u1C29\u1C2A\u1C2B\u1C34\u1C35\uA823\uA824\uA827\uA880\uA881\uA8B4\uA8B5\uA8B6\uA8B7\uA8B8\uA8B9\uA8BA\uA8BB\uA8BC\uA8BD\uA8BE\uA8BF\uA8C0\uA8C1\uA8C2\uA8C3\uA952\uA953\uAA2F\uAA30\uAA33\uAA34\uAA4D]/,
      peg$c235 = peg$classExpectation(["\u0903", "\u093E", "\u093F", "\u0940", "\u0949", "\u094A", "\u094B", "\u094C", "\u0982", "\u0983", "\u09BE", "\u09BF", "\u09C0", "\u09C7", "\u09C8", "\u09CB", "\u09CC", "\u09D7", "\u0A03", "\u0A3E", "\u0A3F", "\u0A40", "\u0A83", "\u0ABE", "\u0ABF", "\u0AC0", "\u0AC9", "\u0ACB", "\u0ACC", "\u0B02", "\u0B03", "\u0B3E", "\u0B40", "\u0B47", "\u0B48", "\u0B4B", "\u0B4C", "\u0B57", "\u0BBE", "\u0BBF", "\u0BC1", "\u0BC2", "\u0BC6", "\u0BC7", "\u0BC8", "\u0BCA", "\u0BCB", "\u0BCC", "\u0BD7", "\u0C01", "\u0C02", "\u0C03", "\u0C41", "\u0C42", "\u0C43", "\u0C44", "\u0C82", "\u0C83", "\u0CBE", "\u0CC0", "\u0CC1", "\u0CC2", "\u0CC3", "\u0CC4", "\u0CC7", "\u0CC8", "\u0CCA", "\u0CCB", "\u0CD5", "\u0CD6", "\u0D02", "\u0D03", "\u0D3E", "\u0D3F", "\u0D40", "\u0D46", "\u0D47", "\u0D48", "\u0D4A", "\u0D4B", "\u0D4C", "\u0D57", "\u0D82", "\u0D83", "\u0DCF", "\u0DD0", "\u0DD1", "\u0DD8", "\u0DD9", "\u0DDA", "\u0DDB", "\u0DDC", "\u0DDD", "\u0DDE", "\u0DDF", "\u0DF2", "\u0DF3", "\u0F3E", "\u0F3F", "\u0F7F", "\u102B", "\u102C", "\u1031", "\u1038", "\u103B", "\u103C", "\u1056", "\u1057", "\u1062", "\u1063", "\u1064", "\u1067", "\u1068", "\u1069", "\u106A", "\u106B", "\u106C", "\u106D", "\u1083", "\u1084", "\u1087", "\u1088", "\u1089", "\u108A", "\u108B", "\u108C", "\u108F", "\u17B6", "\u17BE", "\u17BF", "\u17C0", "\u17C1", "\u17C2", "\u17C3", "\u17C4", "\u17C5", "\u17C7", "\u17C8", "\u1923", "\u1924", "\u1925", "\u1926", "\u1929", "\u192A", "\u192B", "\u1930", "\u1931", "\u1933", "\u1934", "\u1935", "\u1936", "\u1937", "\u1938", "\u19B0", "\u19B1", "\u19B2", "\u19B3", "\u19B4", "\u19B5", "\u19B6", "\u19B7", "\u19B8", "\u19B9", "\u19BA", "\u19BB", "\u19BC", "\u19BD", "\u19BE", "\u19BF", "\u19C0", "\u19C8", "\u19C9", "\u1A19", "\u1A1A", "\u1A1B", "\u1B04", "\u1B35", "\u1B3B", "\u1B3D", "\u1B3E", "\u1B3F", "\u1B40", "\u1B41", "\u1B43", "\u1B44", "\u1B82", "\u1BA1", "\u1BA6", "\u1BA7", "\u1BAA", "\u1C24", "\u1C25", "\u1C26", "\u1C27", "\u1C28", "\u1C29", "\u1C2A", "\u1C2B", "\u1C34", "\u1C35", "\uA823", "\uA824", "\uA827", "\uA880", "\uA881", "\uA8B4", "\uA8B5", "\uA8B6", "\uA8B7", "\uA8B8", "\uA8B9", "\uA8BA", "\uA8BB", "\uA8BC", "\uA8BD", "\uA8BE", "\uA8BF", "\uA8C0", "\uA8C1", "\uA8C2", "\uA8C3", "\uA952", "\uA953", "\uAA2F", "\uAA30", "\uAA33", "\uAA34", "\uAA4D"], false, false),
      peg$c236 = peg$otherExpectation("Unicode decimal number"),
      peg$c237 = /^[0123456789\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9\u07C0\u07C1\u07C2\u07C3\u07C4\u07C5\u07C6\u07C7\u07C8\u07C9\u0966\u0967\u0968\u0969\u096A\u096B\u096C\u096D\u096E\u096F\u09E6\u09E7\u09E8\u09E9\u09EA\u09EB\u09EC\u09ED\u09EE\u09EF\u0A66\u0A67\u0A68\u0A69\u0A6A\u0A6B\u0A6C\u0A6D\u0A6E\u0A6F\u0AE6\u0AE7\u0AE8\u0AE9\u0AEA\u0AEB\u0AEC\u0AED\u0AEE\u0AEF\u0B66\u0B67\u0B68\u0B69\u0B6A\u0B6B\u0B6C\u0B6D\u0B6E\u0B6F\u0BE6\u0BE7\u0BE8\u0BE9\u0BEA\u0BEB\u0BEC\u0BED\u0BEE\u0BEF\u0C66\u0C67\u0C68\u0C69\u0C6A\u0C6B\u0C6C\u0C6D\u0C6E\u0C6F\u0CE6\u0CE7\u0CE8\u0CE9\u0CEA\u0CEB\u0CEC\u0CED\u0CEE\u0CEF\u0D66\u0D67\u0D68\u0D69\u0D6A\u0D6B\u0D6C\u0D6D\u0D6E\u0D6F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0ED0\u0ED1\u0ED2\u0ED3\u0ED4\u0ED5\u0ED6\u0ED7\u0ED8\u0ED9\u0F20\u0F21\u0F22\u0F23\u0F24\u0F25\u0F26\u0F27\u0F28\u0F29\u1040\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1090\u1091\u1092\u1093\u1094\u1095\u10